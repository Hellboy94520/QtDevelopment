#include "compteurItemv2.hpp"
#include "trace.hpp"

#include <QDebug>

/* -------------------------------------------------
 *  Constructor
 * ------------------------------------------------- */
CompteurItemV2::CompteurItemV2(const double& pSize)
{
    QPainterPath lPainterPath = createPath(pSize);

    //Design
    setPen(_pen);
    setBrush(_brush);
    setPath(lPainterPath);
    Trace::get_instance()->INFO("CompteurItemV2 is created");
}

/* -------------------------------------------------
 *
 * ------------------------------------------------- */
const QPainterPath CompteurItemV2::createPath(const double& pSize)
{
    QPainterPath lPainterPath;

    const double lRadius = getMiddle(pSize);
    const double lXMoveFromCircle2 = lRadius*_circlesSpace;

    QPointF lPos1(cos(getRadian(_angleStart))*lRadius,
                 sin(getRadian(_angleStart))*lRadius);

    //Origine
    lPainterPath.moveTo(lPos1);

    //Line 1
    QPointF lPos2 = lPos1;
    lPos2.setX(lPos1.x()+lXMoveFromCircle2);    //On prends en compte le dÃ©calage entre les deux cercles
    lPainterPath.lineTo(lPos2);

    //Circle 1
    lPainterPath.arcTo(-lRadius+lXMoveFromCircle2,0,
                    pSize,pSize,
                    _angleStart,-_angleSize);

    //Line 2
    QPointF lPos3(lPos1.x(),lPos1.y()+lRadius);
    lPainterPath.lineTo(lPos3);

    //Circle 2
    lPainterPath.arcTo(-lRadius,0,
                       pSize,pSize,
                       -_angleStart,_angleSize);

    //End Shape
    lPainterPath.closeSubpath();

    calculSize(lPos1, lPos3, (lXMoveFromCircle2+lRadius));

    return lPainterPath;
}


/* -------------------------------------------------
 *
 * ------------------------------------------------- */
const bool CompteurItemV2::setPosition(const double &pX, const double &pY)
{
    setPos(pX-_originPoint.x(), pY-_originPoint.y());
    return true;
}


/* -------------------------------------------------
 *
 * ------------------------------------------------- */
void CompteurItemV2::calculSize(const QPointF &pP1, const QPointF &pP3, const double& pXMax)
{
    _sizeFigure.setX(pP1.x());
    _sizeFigure.setY(pP1.y());
    _sizeFigure.setWidth(pXMax-pP1.x());
    _sizeFigure.setHeight(pP3.y()-pP1.y());
    _originPoint.setX(_sizeFigure.width()/2);
    _originPoint.setY(_sizeFigure.height()/2);
    Trace::get_instance()->DDEBUG("Size Figure : " << QString::number(_sizeFigure.width()) << "," << QString::number(_sizeFigure.height()));
    Trace::get_instance()->DDEBUG("Origin Point : " << _originPoint.x() << "," << _originPoint.y());
}


